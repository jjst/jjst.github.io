<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Brain dump.</title><link href="https://jjst.github.io/" rel="alternate"></link><link href="https://jjst.github.io/feeds/all.atom.xml" rel="self"></link><id>https://jjst.github.io/</id><updated>2016-10-20T18:00:00+01:00</updated><entry><title>RC return statement</title><link href="https://jjst.github.io/posts/2016/10/rc-return-statement/" rel="alternate"></link><published>2016-10-20T18:00:00+01:00</published><author><name>Jérémie Jost</name></author><id>tag:jjst.github.io,2016-10-20:posts/2016/10/rc-return-statement/</id><summary type="html">&lt;p&gt;There's these one-day hackathons I go to once in a while. They're called BLT for Build, Learn, Teach. They're not like
traditional hackathons with a theme or specific things to build. People come in in the morning and we have a group
meeting where everyone shares what they're interested in or want to work on, then we form groups and pair or work on
our own stuff.  At the end of the day, people share what they did. Sometimes they built something cool, sometimes they
just spent their day talking random programming stuff or learning about one thing or the other, and that's cool as
well.&lt;/p&gt;
&lt;p&gt;When I applied to the &lt;a href="https://www.recurse.com/"&gt;Recurse Center&lt;/a&gt;, this is how I pictured it. The same kind of
experience, but over 3 months instead of a single day.&lt;/p&gt;
&lt;p&gt;The premise of RC is pretty simple: you devote 3 months to becoming a better programmer—whatever that entails is
entirely up to you. You don't have to be an experienced programmer to attend. In my batch, some people hadn't finished
college. Others had 5-10 years of industry experience. Some were people reconverting from law, finance
or arts.&lt;/p&gt;
&lt;p&gt;I first heard of the program in an Hacker News headline, 18 months or so ago (the Recurse Center was still known as
&lt;a href="https://www.recurse.com/blog/77-hacker-school-is-now-the-recurse-center"&gt;Hacker School&lt;/a&gt; back then). Though the concept
immediately appealed to me (3 months to finally finish all of the projects I'm always putting off, right?), it took a
year (and a complete burn out) for me to finally apply. Why so long? A mix of &lt;a href="https://www.youtube.com/watch?v=0sHCQWjTrJ8"&gt;brain
crack&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Impostor_syndrome"&gt;impostor
syndrome&lt;/a&gt;. The latter isn't uncommon among Recursers—it even gets
mentioned in RC's &lt;a href="https://www.recurse.com/manual#sec-environment"&gt;user manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;During the application process, I talked about spending my batch contributing to open source software, and geeking
around with Haskell and Rust or whatnot. Turns out this was superceded by (or maybe just related to?) a bigger goal,
unbeknownst to me: self-healing.&lt;/p&gt;
&lt;p&gt;I've started programming when I was in high school (coding games in TI-BASIC on my calculator) and when it came time to
choose a career, I thought that if I was going to spend 8 hours a day getting paid to do something, I might as well be
enjoying it. Makes sense, right? Except it turns out when you're not careful, full-time jobs have a tendency to suck
the fun out of anything, even what you thought was your passion.&lt;/p&gt;
&lt;p&gt;So here I was: after finally applying, and being accepted into a program dedicated to making myself a &lt;em&gt;better
programmer&lt;/em&gt;, one of the first questions I had to answer when joining RC was whether I still enjoyed &lt;em&gt;being a
programmer&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(Spoiler alert: I do)&lt;/p&gt;
&lt;p&gt;For me, the Recurse Center meant having the time and freedom to code for myself, with no constraints whatsoever. But
also (after 5 years as a full-time engineer) the freedom to not code when I didn't want to.&lt;/p&gt;
&lt;p&gt;This meant I spent most of my first week helping people and &lt;a href="https://en.wikipedia.org/wiki/Pair_programming"&gt;pairing&lt;/a&gt;
on their own projects, or on Hackerrank or Project Euler problems (people pair a lot at RC). I didn't write code on my
own, and it felt good.&lt;/p&gt;
&lt;p&gt;And then I attended some workshops, and I got some ideas for things I could build. I started a silly project combining
some Javascript rendering with a Flask backend to generate random drawings using a genetic algorithm. I started
organising weekly code dojos, where people paired on katas using any language they felt like trying. I got curious
about &lt;a href="http://elm-lang.org/"&gt;Elm&lt;/a&gt;, and ended up building a &lt;a href="https://github.com/jjst/elmtimate-tictactoe"&gt;game&lt;/a&gt; with it.
And then paired on &lt;a href="https://github.com/mariellefoster/lightsout"&gt;another one&lt;/a&gt;. And yet &lt;a href="https://github.com/jjst/dotloverc"&gt;another
one&lt;/a&gt;. By the end of my batch, I gave a workshop on building web applications and
games in Elm, a language I barely knew before.&lt;/p&gt;
&lt;p&gt;So, when people ask me what I did at the Recurse Center, I can point them to those projects. But while there's
something gratifying about having built some tangible things I can show, I don't want to reduce my experience to just
those. Doing so would not only diminish but also run counter to some of the lessons I learnt at RC.&lt;/p&gt;
&lt;p&gt;I learnt there's tremendous value in reinventing the wheel. That not everything you build needs to have a purpose other
than "I thought this would be fun to do". Building your own Bittorent client, or web server, or OS, or database, might
be the best way to really understand how those things work.&lt;/p&gt;
&lt;p&gt;I also learnt I have things to teach, and that I love doing so. I realised that past a stage, there's no fixed
hierarchy of teaching: everyone has things to teach and things to learn. Admittedly, this is especially true in an
environment such as RC, where there aren't really teachers or students, and where you learn from your peers.&lt;/p&gt;
&lt;p&gt;I learnt that there are just too many things I want to learn, and I can't pursue them all, even when I can dedicate
100% of my time to do so. This doesn't mean I can't enjoy learning the things I want to. It does mean I don't have to
feel guilty about not spending my time learning all the things I'd like to. I shouldn't punish myself for being overly
curious.&lt;/p&gt;
&lt;p&gt;Most importantly I learnt that programmers come in all shapes and forms. Some of us like to understand how computers
work in their inner details, others like higher-level abstractions. Some of us like code as a craft, others like to use
code to get shit done. Some are great at building things, others are great at teaching. And that's awesome. Because
there's a need for all of us. And none of us can be all of those things at the same time. We all have out strengths and
weaknesses, and pockets of knowledge, with gaps here and there.&lt;/p&gt;
&lt;p&gt;This might sound obvious, but it's so easy to idealise and extrapolate from the few famous programmers who seem to know
everything and get so many things done, and compare yourself to them. What's invisible is all the things they fail at
or don't know about, like any of us, or the times they're frustrated and want to give up or don't feel like programming
anymore.&lt;/p&gt;
&lt;p&gt;So don't guilt yourself if you're not the best at systems programming, data structures, or if you don't know FP or
Haskell when all the cool kids are talking about it. Or if you don't have a blog when you're not the kind of person who
wants to share their thoughts to the entire world. Or if you don't feel like coding on your free time. Don't guilt
yourself if you're struggling to become a better programmer, because it's tough. Or even if you &lt;em&gt;don't want&lt;/em&gt; to become
a better programmer and want to pursue other passions.  That's perfectly fine. Do whatever makes you happy.&lt;/p&gt;
&lt;p&gt;(I'm writing all of those lessons down because I know I'll forget about them from time to time)&lt;/p&gt;
&lt;p&gt;If there's one thing I underestimated, it's how much the Recurse Center was (at least for me) a social experience.&lt;/p&gt;
&lt;p&gt;My best moments were all spent sharing my passion for coding with other people. All the pair programming sessions. The
workshops spontaneously organised by Recursers. The time we spent &lt;a href="https://jjst.github.io/posts/2016/08/building-a-photobooth-in-python/"&gt;hacking
hardware&lt;/a&gt; or &lt;a href="https://jjst.github.io/posts/2016/08/group-pomodoros-are-awesome/"&gt;organising group pomodoros&lt;/a&gt;.  Or that
time Justin organised &lt;em&gt;non-technical&lt;/em&gt; lightning talks were everyone could present on a topic they were passionate about
as long as it &lt;em&gt;wasn't&lt;/em&gt; programming—and people talked about bird watching, genetics, how to cook the perfect tortilla,
typography, or even how to flirt!&lt;/p&gt;
&lt;p&gt;Being immersed in an environment where everyone around you is having fun building and learning things is an incredible
motivational boost. On top of that, RC is one of the few places in the tech community where negativity and toxicity are
absent. RCers are always encouraging and enthusiastic about what you're doing, and showing genuine interest. Mistakes
are seen not as flaws but as opportunities to learn and grow. People see the best version of yourself, and in return,
you want to be that person.&lt;/p&gt;
&lt;p&gt;So yeah. Those three months have been amazing. I've built friendships. I've learnt a ton, about programming, about
other things, about myself.  So long Recurse Center, and see you soon. Never graduate!&lt;/p&gt;</summary><category term="recurse center"></category></entry><entry><title>Group pomodoros are awesome</title><link href="https://jjst.github.io/posts/2016/08/group-pomodoros-are-awesome/" rel="alternate"></link><published>2016-08-10T18:00:00+01:00</published><author><name>Jérémie Jost</name></author><id>tag:jjst.github.io,2016-08-10:posts/2016/08/group-pomodoros-are-awesome/</id><summary type="html">&lt;p&gt;Some of us productivity nerds tried something new this week at the &lt;a href="http://recurse.com/"&gt;Recurse Center&lt;/a&gt;: group
pomodoros!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Cherry tomatoes" src="https://jjst.github.io/images/pomodoro/tomatoes.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I employ the &lt;a href="http://pomodorotechnique.com/"&gt;pomodoro technique&lt;/a&gt; pretty often, especially when I'm working on long
tasks that I tend to procrastinate on (say, writing a blog post...). It's one of those productivity hacks that is so
simple in principle that it sounds too good to be true. The idea is as follows (cf
&lt;a href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;Wikipedia&lt;/a&gt;) : you use a timer to divide your work day into fixed, 25
minutes chunks of time, called &lt;em&gt;pomodoros&lt;/em&gt;. Each pomodoro is separated by a 5 minute break. When anything distracting
comes up during a pomodoro, you note it down somewhere and come back to it during the break.&lt;/p&gt;
&lt;p&gt;This works because 25 minutes is not that big of a time commitment: when the urge to check Twitter, Slack or your phone
comes up in the middle of a pomodoro, you just have to convince yourself to work a dozen minutes more before allowing
yourself to give in to your social cravings (and by then, you might even find a better way to spend your five minutes
break).&lt;/p&gt;
&lt;p&gt;I've used pomodoros regularly at my previous full-time job, but it can be hard to apply the technique when working with
other people. You often need to collaborate and pair with other developers who aren't necessarily using it. Also, it
requires willpower to stay focused and wait for your break when the rest of your coworkers are having breaks at a
different time. If you end up taking breaks with other people, it requires even more willpower to keep your pomodoro
break to 5 minutes when the coffee break drags on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tomato timer" src="https://jjst.github.io/images/pomodoro/tomato-timer.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Using the pomodoro technique in groups comes with some interesting perks. The added social pressure helps to keep you
in check: seeing everyone "in the zone" at the same time during their pomodoros helps with concentration and
motivation; and your partners can reprimand you if they see you spending time on the chat instead. Also, in a group,
pomodoro breaks are fun again: everyone takes a break together, yay! This all makes it dramatically easier to use the
method consistently.&lt;/p&gt;
&lt;p&gt;So, how do you make this work in practice? &lt;/p&gt;
&lt;p&gt;First, you need a group of &lt;strike&gt;guinea pigs&lt;/strike&gt; people who want to use the technique together. They don't have
to be working on related things: in fact, in our group this week, all pomodoro-ists were working on different projects.
Then, isolate yourselves from the distracting rest of the world. We use a dedicated room, but if that's not an option
find yourself a quiet area in the office/space. For our timer, we placed a separate monitor running an online pomodoro
app (there's a &lt;a href="https://www.google.com/search?q=online+pomodoro+timer"&gt;fair number of them available on google&lt;/a&gt;) on a
dedicated shelf. This way everyone could constantly see how much time was left in the current cycle (of course, like
with standard pomodoro, you could always do it low-tech and just use a standard kitchen timer).  Also, and this is the
most crucial part: we implemented a reward system by having a huge bowl of M&amp;amp;M's everyone could pick from during their
pomodoro breaks.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Setup" src="https://jjst.github.io/images/pomodoro/pomodoro-setup.jpg" /&gt;
&lt;center&gt;&lt;small&gt;Our Pomodoro room setup&lt;/small&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;So if you've been using the pomodoro technique and know teammates or coworkers who do as well, I highly
recommend trying out group pomodoros. And if you haven't used the pomodoro technique yet, give it a shot the next time
you need to focus on a big task! As for me, the next thing I'd love to experiment with is using pomodoro for pair
programming.&lt;/p&gt;</summary><category term="recurse center"></category><category term="productivity"></category><category term="pomodoro"></category></entry><entry><title>Building a photobooth in Python</title><link href="https://jjst.github.io/posts/2016/08/building-a-photobooth-in-python/" rel="alternate"></link><published>2016-08-06T18:00:00+01:00</published><author><name>Jérémie Jost</name></author><id>tag:jjst.github.io,2016-08-06:posts/2016/08/building-a-photobooth-in-python/</id><summary type="html">&lt;p&gt;The &lt;a href="https://www.recurse.com/five-years"&gt;Recurse Center is 5 years old&lt;/a&gt;!  Faculty threw a small party in the RC space
to celebrate the occasion, with current batch members and alumns welcome. Me and Philipp
(&lt;a href="https://twitter.com/philj0st"&gt;@philj0st&lt;/a&gt;) marked the occasion by building a photobooth.
Guests could use it to snap pics which then got posted to our internal chat system:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photobooth pic" src="https://jjst.github.io/images/photobooth/group-pic.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;This is the story of how we built it in one afternoon right before the party.&lt;/p&gt;
&lt;h2&gt;12:00&lt;/h2&gt;
&lt;p&gt;After learning of the existence of a photobooth at a previous Recurse Center event, and finding a spare HD camera in
the building earlier this week, Philip and I agreed to meet today and try to recreate the experience. Only problem: the
party is in a few hours, so we have to move quick. We are drafting a plan to make it happen whilst having lunch at a
French restaurant with other Recursers.&lt;/p&gt;
&lt;h2&gt;13:30&lt;/h2&gt;
&lt;p&gt;First things first, materials! We head over to &lt;a href="http://tinkersphere.com/"&gt;Tinkersphere&lt;/a&gt;. On our way there, Philipp gets
stomach sick. It's probably the mussels. Sorry Philipp! (you should totally try some on your road trip in France
though). Here's the list of supplies we have/need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A raspberry pi, to power the photobooth ✓ (we have tons of them lingering at the Recurse Center)&lt;/li&gt;
&lt;li&gt;A HD webcam, to take the pictures ✓ (we found one we can use already)&lt;/li&gt;
&lt;li&gt;A wifi module or dongle, to connect the pi to the internets ✗&lt;/li&gt;
&lt;li&gt;A prop, device or button to act as a trigger for the photo ✗&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We leave the store with a Raspberry Pi 3 (because it comes with a wifi module builtin, and I figure it's only 20
dollars more expensive than a wifi dongle), an SD card, and a pink arcade button to act as our trigger.&lt;/p&gt;
&lt;h2&gt;14:00&lt;/h2&gt;
&lt;p&gt;On our way back to the Recurse Center, Philipp realises that his old laptop is still lingering there unused. It's still
functional, except for the battery, which shouldn't be too much of an issue. Using the laptop to power the photobooth
will be much faster as it's already set up. We realise there is soon to be a new Raspberry Pi sitting idle in the space
for nothing!&lt;/p&gt;
&lt;p&gt;We reach the space and find the computer. There's only one problem: it's a Swiss laptop. We end up spending the next 20
minutes frantically searching for a Swiss-to-US power converter. Meanwhile, I install
&lt;a href="https://www.raspberrypi.org/downloads/noobs/"&gt;NOOBS&lt;/a&gt; on the SD card just in case we need to use the Raspberry Pi after
all.&lt;/p&gt;
&lt;h2&gt;14:20&lt;/h2&gt;
&lt;p&gt;I inform Rachel, Recurse Center's operations manager, of our evil plans. We get the get go to use the cloak room for
our photobooth install, and Rachel helps me by trying to dig the code for the old photobooth that we talked about
earlier this week.&lt;/p&gt;
&lt;h2&gt;14:30&lt;/h2&gt;
&lt;p&gt;Philipp sets up the laptop and the webcam, and installs and tests
&lt;a href="https://en.wikipedia.org/wiki/Cheese_(software)"&gt;Cheese&lt;/a&gt;, a Gnome application to take webcam pictures. We have fun
trying out a bunch of the built-in funky effects and make funny faces in front of the webcam:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photobooth funky effects" src="https://jjst.github.io/images/photobooth/funky.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Meanwhile, Rachel finds the code for the old photobooth, but it's in Go (which I'm wildly unfamiliar with) and there
seems to be a fair amount of hardcoded things which are going to make it tricky to adapt without a good grasp of the
code.&lt;/p&gt;
&lt;p&gt;I decide to start working on Plan B. We use &lt;a href="http://zulip.com/"&gt;Zulip&lt;/a&gt; as our internal chat system, and I've been
contributing to a Zulip bot called &lt;a href="https://github.com/kokeshii/RSVPBot/"&gt;RSVPBot&lt;/a&gt; recently. I copy the code from
RSVPBot and tear it to shreads, only keeping the bits related to message sending. The plan in its current form is as
follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wire and solder the arcade button we bought to an Nintendo 64 controller we found, plugged to the laptop via
  USB,&lt;/li&gt;
&lt;li&gt;remap the Cheese controls so that the button triggers a picture,&lt;/li&gt;
&lt;li&gt;have our new Zulip bot use &lt;a href="https://en.wikipedia.org/wiki/Inotify"&gt;inotify&lt;/a&gt; to watch the Cheese folder for new
  pictures, and post a message to a dedicated stream with the new picture enclosed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;15:00&lt;/h2&gt;
&lt;p&gt;I successfully send a "Hello, world" message from the photobooth Zulip bot! It doesn't contain anything interesting yet
though, so I start working on having it upload and send an enclosed picture.&lt;/p&gt;
&lt;p&gt;Philipp sets up &lt;a href="http://qjoypad.sourceforge.net/"&gt;QJoyPad&lt;/a&gt; to remap one of the buttons of the N64 controller
so that it triggers Cheese.&lt;/p&gt;
&lt;h2&gt;15:30&lt;/h2&gt;
&lt;p&gt;Time to solder! Philipp gets to work unscrewing the N64 controller to get access to the internal wiring. He then cuts
the wire of the L trigger button and solders new extension wires to it. He then solders those wires to the pink arcade
button. Success! With QJoyPad running, we are now able to trigger Cheese to take a picture by pushing on the button.&lt;/p&gt;
&lt;p&gt;Meanwhile, I'm struggling to find any documentation on how to upload pictures using the Zulip API. Some people on the
chat tell me they tried to use file upload before but unsuccessfully as no API endpoint exists. However after chatting
with some Zulip devs it turns out that an upload REST API endpoint was added just 2 weeks ago, but hasn't been
documented yet! There are no Python bindings for the API endpoint, but using something like
&lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt;, with a multipart upload, should work just fine. The gods are
with us!&lt;/p&gt;
&lt;h2&gt;16:00&lt;/h2&gt;
&lt;p&gt;Well... not so fast. I find out the hard way that the update introducing the new upload API endpoint hasn't been
deployed to the official zulip server yet. No picture upload for us! We'll have to find another way, and quick.
We decide to use Python's built-in &lt;code&gt;SimpleHTTPServer&lt;/code&gt; to serve the pictures &lt;em&gt;directly from the laptop&lt;/em&gt;, because why
not? An unfortunate consequence is that pictures will be visible only to people connected to the Recurse Center's
internal wifi network. Unfortunately, community members who aren't at the party won't be able to see the pictures
posted to the chat.&lt;/p&gt;
&lt;h2&gt;16:30&lt;/h2&gt;
&lt;p&gt;I install &lt;a href="https://github.com/seb-m/pyinotify"&gt;pyinotify&lt;/a&gt; and update the bot so that it watches for files being written
in the Cheese pictures folder. The code looks pretty straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_IN_CLOSE_WRITE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pathname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[A picture was taken in the photobooth!](&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_message&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;subject&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;booth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;to&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;test-bot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;17:00&lt;/h2&gt;
&lt;p&gt;Now that I have a working version of the Zulip bot, we deploy it on the laptop we will use for the photobooth, and test
everything together for the first time. Testing goes fairly well once we remove all the hardcoded stuff we forgot in
our haste. Fixing all the last bugs proves especially funny, with having to use a swiss keyboard layout on the laptop.&lt;/p&gt;
&lt;h2&gt;17:30&lt;/h2&gt;
&lt;p&gt;We take a one hour break to watch the traditional Thursday presentations. On Thursday, Recursers have 5 minutes slots
to give lightning talks to present what they've been working on for the week. It's one of the best moments of the week
and we wouldn't want to miss that!&lt;/p&gt;
&lt;h2&gt;18:30&lt;/h2&gt;
&lt;p&gt;Philip is not satisfied with the way we serve pictures, and thinks we can do better by having a web gallery where
people can see all the pictures that have been taken in the photobooth. He sets up &lt;a href="https://httpd.apache.org/"&gt;Apache&lt;/a&gt;
and &lt;a href="http://www.ubergallery.net/"&gt;UberGallery&lt;/a&gt;, and configures Cheese to save pictures in &lt;code&gt;/var/www/&lt;/code&gt; so that they are
server by UberGallery.&lt;/p&gt;
&lt;p&gt;Meanwhile, I roam the space to find some cardboard we can use as the dashboard for our photobooth. I find a shoebox
that makes the trick and cut a hole the size of the arcade button using a utility knife. There's only one problem: we
have to undo the soldering to be able to fit the button in. Re-soldering everything inside the shoebox turns out to be
a lot more finicky, but Philipp manages. We wait for the solder to cool, then test everything again. Still works!  The
dashboard ends up looking like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photobooth dashboard" src="https://jjst.github.io/images/photobooth/dashboard.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Here's what it looks like inside, where you can see the N64 controller:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photobooth inside" src="https://jjst.github.io/images/photobooth/inside.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;(Yes, we are using a hammer as a weight to stabilise the ensemble)&lt;/p&gt;
&lt;h2&gt;19:00&lt;/h2&gt;
&lt;p&gt;Time for the actual install! We save all environment variables we need for the zulip credentials and the settings to a
bash script, then shut down the laptop (remember, no battery!) to install it in the cloakroom/photobooth chamber. We
put the shoebox with the arcade button and the N64 controller on a shelf, then mount the HD webcam and the laptop above
it. Plug everything together, set up the lighting, add some props, and voila! We're ready to take some pics, just in
time for the party to start!&lt;/p&gt;
&lt;p&gt;&lt;img alt="Photobooth setup" src="https://jjst.github.io/images/photobooth/setup.jpg" /&gt;&lt;/p&gt;</summary><category term="recurse center"></category><category term="hardware hacking"></category><category term="python"></category></entry></feed>